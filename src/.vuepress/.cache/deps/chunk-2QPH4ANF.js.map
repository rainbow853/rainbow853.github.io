{
  "version": 3,
  "sources": ["../../../../node_modules/transfer-to-window/dist/index.mjs"],
  "sourcesContent": ["class TransferToWindow {\n    /**\n     *\n     * @param param 参数列表\n     * @param silent 是否计算输入输出窗口之间的变化矩阵\n     */\n    constructor(param, silent) {\n        const { inw, inh, outw, outh, cellW, cellH, minWH, maxWH, limitInWindow, limitSize } = param;\n        this.inw = inw;\n        this.inh = inh;\n        this.outw = outw;\n        this.outh = outh;\n        this.cellW = cellW !== null && cellW !== void 0 ? cellW : 1;\n        this.cellH = cellH !== null && cellH !== void 0 ? cellH : 1;\n        this.minWH = minWH || 1;\n        this.maxWH = maxWH || Infinity;\n        this.minScale = this.maxScale = 1;\n        this.limitInWindow = limitInWindow || false;\n        this.limitSize = limitSize !== null && limitSize !== void 0 ? limitSize : 100;\n        silent || this.resize();\n    }\n    /**\n     * 平移\n     * @param dx\n     * @param dy\n     */\n    translate(dx, dy) {\n        this.updateMatrix(this.scale, this.dx + dx, this.dy + dy);\n    }\n    /**\n     * 以(cx,cy)为中心缩放ratio比例\n     * @param cx\n     * @param cy\n     * @param ratio\n     */\n    zoom(cx, cy, ratio) {\n        const { dx, dy, scale, minScale, maxScale } = this;\n        if (scale * ratio > maxScale) {\n            ratio = maxScale / scale;\n        }\n        else if (scale * ratio < minScale) {\n            ratio = minScale / scale;\n        }\n        this.updateMatrix(scale * ratio, (dx - cx) * ratio + cx, (dy - cy) * ratio + cy);\n    }\n    /**\n     * 以InCoor：(cx,cy)为中心缩放到scale比例\n     * @param cx\n     * @param cy\n     * @param scale\n     */\n    zoomToByInCoor(cx, cy, scale) {\n        const { outw, outh, minScale, maxScale, cellW, cellH } = this;\n        scale = Math.min(maxScale, Math.max(minScale, scale));\n        this.updateMatrix(scale, outw / 2 - cx * scale * cellW, outh / 2 - cy * scale * cellH);\n    }\n    /**\n     * 将输入数据完整放置于输出窗口的正中间；效果类似于CSS效果：\n     *    background-size: contain;\n     *    background-repeat: no-repeat;\n     *    background-position: center;\n     */\n    resize() {\n        const { outw, outh, inw, inh, minWH, maxWH } = this;\n        let scale;\n        if (outw / outh > inw / inh) {\n            scale = outh / inh;\n        }\n        else {\n            scale = outw / inw;\n        }\n        this.minScale = Math.min(scale, minWH / inw, minWH / inh);\n        this.maxScale = Math.max(scale, maxWH / inw, maxWH / inh);\n        this.updateMatrix(scale, (outw - inw * scale) / 2, (outh - inh * scale) / 2);\n    }\n    /**\n     * 将输入窗口的roi:[x,y,width,heigght]区域放置于输出窗口正中间\n     * @param x 起点位置x\n     * @param y 起点位置y\n     * @param width 宽\n     * @param height 高\n     * @param margin roi的margin值\n     */\n    scrollToRect(x, y, width, height, margin) {\n        margin = margin !== null && margin !== void 0 ? margin : 100;\n        const { outw, outh, cellW, cellH } = this;\n        const scale = Math.min((outw - margin * 2) / width / cellW, (outh - margin * 2) / height / cellH);\n        this.zoomToByInCoor(x + width / 2, y + height / 2, scale);\n    }\n    /**\n     * 更新输入->输出矩阵\n     */\n    updateMatrix(scale, dx, dy) {\n        if (this.limitInWindow) {\n            const { inw, inh, outw, outh, limitSize } = this;\n            dx = Math.min(outw - limitSize, Math.max(-inw * scale + limitSize, dx));\n            dy = Math.min(outh - limitSize, Math.max(-inh * scale + limitSize, dy));\n        }\n        this.scale = scale;\n        this.scaleX = scale * this.cellW;\n        this.scaleY = scale * this.cellH;\n        this.dx = dx;\n        this.dy = dy;\n        this.updateInvMatrix();\n    }\n    /**\n     * 更新输出->输入矩阵\n     */\n    updateInvMatrix() {\n        this.invScaleX = 1 / this.scaleX;\n        this.invScaleY = 1 / this.scaleY;\n        this.invDx = -this.dx * this.invScaleX;\n        this.invDy = -this.dy * this.invScaleY;\n    }\n    /**\n     * 坐标(x,y)是否位于输入视框内\n     */\n    inCoorIsIn(x, y) {\n        const { inw, inh } = this;\n        return x >= 0 && x < inw && y >= 0 && y < inh;\n    }\n    /**\n     * 坐标(x,y)是否位于输出视框内\n     */\n    outCoorIsIn(x, y) {\n        const { outw, outh } = this;\n        return x >= 0 && x < outw && y >= 0 && y < outh;\n    }\n    /**\n     * 转化坐标组(x,y,...)\n     */\n    transCoors(coors, scaleX, scaleY, dx, dy) {\n        const result = [];\n        for (let i = 1; i < coors.length; i = i + 2) {\n            result.push(~~((coors[i - 1]) * scaleX + dx), ~~((coors[i]) * scaleY + dy));\n        }\n        return result;\n    }\n    /**\n     * 将输入坐标组(x,y,...)转化为输出坐标组\n     */\n    transInToOut(coors) {\n        const { scaleX, scaleY, dx, dy } = this;\n        return this.transCoors(coors, scaleX, scaleY, dx, dy);\n    }\n    /**\n     * 将输出坐标组(x,y,...)转化为输入坐标组\n     */\n    transOutToIn(coors) {\n        const { invScaleX, invScaleY, invDx, invDy } = this;\n        return this.transCoors(coors, invScaleX, invScaleY, invDx, invDy);\n    }\n}\nexport { TransferToWindow, TransferToWindow as default };\n"],
  "mappings": "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",
  "names": []
}
