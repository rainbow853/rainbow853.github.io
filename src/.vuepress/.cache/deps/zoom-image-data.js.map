{
  "version": 3,
  "sources": ["../../../../node_modules/zoom-image-data/dist/index.mjs"],
  "sourcesContent": ["import { TransferToWindow } from 'transfer-to-window';\nclass ZoomImageData extends TransferToWindow {\n    constructor(param) {\n        const cellWH = param.cellWH || 10;\n        const cellRatio = param.cellRatio || 1;\n        let cellW = cellWH;\n        let cellH = cellWH;\n        if (cellRatio > 1) {\n            cellH = ~~(cellW / cellRatio);\n        }\n        else {\n            cellW = ~~(cellH * cellRatio);\n        }\n        super(Object.assign(Object.assign({}, param), { inw: cellW * param.inw, inh: cellH * param.inh, cellW,\n            cellH }), true);\n        const { inw, inh, inData, outData, splitCell, splitCellSize } = param;\n        this.sourceW = inw;\n        this.sourceH = inh;\n        this.sourceData = new Uint32Array(inData);\n        this.outData = new Uint32Array(outData);\n        this.splitCell = splitCell || false;\n        this.splitCellSize = splitCellSize || 2;\n        this.resize(true);\n    }\n    /**\n     * Update outputData\n     */\n    update() {\n        const { sourceData, sourceW, sourceH, outData, outw, outh, invScaleX, invScaleY, invDx, invDy, splitCell, splitCellSize, } = this;\n        const splitX = splitCell && (1 / invScaleX) > splitCellSize;\n        const splitY = splitCell && (1 / invScaleY) > splitCellSize;\n        let lr = -1;\n        for (let i = 0; i < outh; i++) {\n            const r = Math.floor((i * invScaleY + invDy));\n            if (r < 0 || r >= sourceH ||\n                (splitY && lr !== r)) {\n                outData.fill(0, i * outw, (i + 1) * outw);\n                lr = r;\n                continue;\n            }\n            lr = r;\n            let lc = -1;\n            for (let j = 0; j < outw; j++) {\n                const c = Math.floor((j * invScaleX + invDx));\n                let index = i * outw + j;\n                if (c < 0 || c >= sourceW ||\n                    (splitX && lc !== c)) {\n                    outData[index] = 0;\n                    lc = c;\n                    continue;\n                }\n                lc = c;\n                outData[index] = sourceData[r * sourceW + c];\n            }\n        }\n    }\n    /**\n     * Translate on outdata\n     * @param dx\n     * @param dy\n     * @param silent Whether update outData\n     */\n    translate(dx, dy, silent) {\n        super.translate(dx, dy);\n        silent || this.update();\n    }\n    /**\n     * Scale ratio multiple at position(cx,cy) on outdata\n     * @param cx\n     * @param cy\n     * @param ratio\n     * @param silent Whether update outData\n     */\n    zoom(cx, cy, ratio, silent) {\n        super.zoom(cx, cy, ratio);\n        silent || this.update();\n    }\n    /**\n     * 以InCoor：(cx,cy)为中心缩放到scale比例\n     * @param cx\n     * @param cy\n     * @param scale\n     * @param silent 是否更新outData\n     */\n    zoomToByInCoor(cx, cy, scale, silent) {\n        super.zoomToByInCoor(cx, cy, scale);\n        silent || this.update();\n    }\n    /**\n     * 将输入数据完整放置于输出窗口的正中间；效果类似于CSS效果：\n     *    background-size: contain;\n     *    background-repeat: no-repeat;\n     *    background-position: center;\n     * @param silent Whether update outData\n     */\n    resize(silent) {\n        super.resize();\n        silent || this.update();\n    }\n    /**\n     * 坐标(x,y)是否位于输入视框内\n     */\n    inCoorIsIn(x, y) {\n        const { sourceW, sourceH } = this;\n        return x >= 0 && x < sourceW && y >= 0 && y < sourceH;\n    }\n}\nexport { ZoomImageData, ZoomImageData as default };\n"],
  "mappings": ";;;;;;AACA,IAAM,gBAAN,cAA4B,iBAAiB;AAAA,EACzC,YAAY,OAAO;AACf,UAAM,SAAS,MAAM,UAAU;AAC/B,UAAM,YAAY,MAAM,aAAa;AACrC,QAAI,QAAQ;AACZ,QAAI,QAAQ;AACZ,QAAI,YAAY,GAAG;AACf,cAAQ,CAAC,EAAE,QAAQ;AAAA,IACvB,OACK;AACD,cAAQ,CAAC,EAAE,QAAQ;AAAA,IACvB;AACA,UAAM,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,KAAK,GAAG;AAAA,MAAE,KAAK,QAAQ,MAAM;AAAA,MAAK,KAAK,QAAQ,MAAM;AAAA,MAAK;AAAA,MAC5F;AAAA,IAAM,CAAC,GAAG,IAAI;AAClB,UAAM,EAAE,KAAK,KAAK,QAAQ,SAAS,WAAW,cAAc,IAAI;AAChE,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,aAAa,IAAI,YAAY,MAAM;AACxC,SAAK,UAAU,IAAI,YAAY,OAAO;AACtC,SAAK,YAAY,aAAa;AAC9B,SAAK,gBAAgB,iBAAiB;AACtC,SAAK,OAAO,IAAI;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACL,UAAM,EAAE,YAAY,SAAS,SAAS,SAAS,MAAM,MAAM,WAAW,WAAW,OAAO,OAAO,WAAW,cAAe,IAAI;AAC7H,UAAM,SAAS,aAAc,IAAI,YAAa;AAC9C,UAAM,SAAS,aAAc,IAAI,YAAa;AAC9C,QAAI,KAAK;AACT,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,YAAM,IAAI,KAAK,MAAO,IAAI,YAAY,KAAM;AAC5C,UAAI,IAAI,KAAK,KAAK,WACb,UAAU,OAAO,GAAI;AACtB,gBAAQ,KAAK,GAAG,IAAI,OAAO,IAAI,KAAK,IAAI;AACxC,aAAK;AACL;AAAA,MACJ;AACA,WAAK;AACL,UAAI,KAAK;AACT,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,cAAM,IAAI,KAAK,MAAO,IAAI,YAAY,KAAM;AAC5C,YAAI,QAAQ,IAAI,OAAO;AACvB,YAAI,IAAI,KAAK,KAAK,WACb,UAAU,OAAO,GAAI;AACtB,kBAAQ,KAAK,IAAI;AACjB,eAAK;AACL;AAAA,QACJ;AACA,aAAK;AACL,gBAAQ,KAAK,IAAI,WAAW,IAAI,UAAU,CAAC;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,IAAI,IAAI,QAAQ;AACtB,UAAM,UAAU,IAAI,EAAE;AACtB,cAAU,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,IAAI,IAAI,OAAO,QAAQ;AACxB,UAAM,KAAK,IAAI,IAAI,KAAK;AACxB,cAAU,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,IAAI,IAAI,OAAO,QAAQ;AAClC,UAAM,eAAe,IAAI,IAAI,KAAK;AAClC,cAAU,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACX,UAAM,OAAO;AACb,cAAU,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,GAAG,GAAG;AACb,UAAM,EAAE,SAAS,QAAQ,IAAI;AAC7B,WAAO,KAAK,KAAK,IAAI,WAAW,KAAK,KAAK,IAAI;AAAA,EAClD;AACJ;",
  "names": []
}
